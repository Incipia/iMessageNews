//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Gregory Klein on 10/6/16.
//  Copyright Â© 2016 Incipia. All rights reserved.
//

import UIKit
import Messages
import Alamofire
import AlamofireRSSParser

class MessagesViewController: MSMessagesAppViewController {
	
	@IBOutlet fileprivate var _collectionView: UICollectionView!
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		let tech = "https://www.wired.com/category/gear/feed/"
		let news = "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml"
		let sports = "https://www.espn.com/espn/rss/news"
		let funny = "https://www.dailyhaha.com/rss/pictures/"
		
//		let url2 = "http://images.apple.com/main/rss/hotnews/hotnews.rss"
		
		
//		let url = URL(string: sports)
//		feedParser = MWFeedParser(feedURL: url)
//		feedParser.delegate = self
//		feedParser.feedParseType = ParseTypeFull
//		
//		feedParser.parse()
		
		let url = "http://rss.cnn.com/rss/cnn_topstories.rss"
		
		Alamofire.request(sports).responseRSS() { (response) -> Void in
			if let feed: RSSFeed = response.result.value {
				//do something with your new RSSFeed object!
				for item in feed.items {
					print(item)
				}
			}
		}
	}
	
	override func didReceiveMemoryWarning() {
		super.didReceiveMemoryWarning()
		// Dispose of any resources that can be recreated.
	}
	
	// MARK: - Conversation Handling
	
	override func willBecomeActive(with conversation: MSConversation) {
		// Called when the extension is about to move from the inactive to active state.
		// This will happen when the extension is about to present UI.
		
		// Use this method to configure the extension and restore previously stored state.
	}
	
	override func didResignActive(with conversation: MSConversation) {
		// Called when the extension is about to move from the active to inactive state.
		// This will happen when the user dissmises the extension, changes to a different
		// conversation or quits Messages.
		
		// Use this method to release shared resources, save user data, invalidate timers,
		// and store enough state information to restore your extension to its current state
		// in case it is terminated later.
	}
	
	override func didReceive(_ message: MSMessage, conversation: MSConversation) {
		// Called when a message arrives that was generated by another instance of this
		// extension on a remote device.
		
		// Use this method to trigger UI updates in response to the message.
	}
	
	override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
		// Called when the user taps the send button.
	}
	
	override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
		// Called when the user deletes the message without sending it.
		
		// Use this to clean up state related to the deleted message.
	}
	
	override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
		// Called before the extension transitions to a new presentation style.
		
		// Use this method to prepare for the change in presentation style.
	}
	
	override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
		// Called after the extension transitions to a new presentation style.
		
		// Use this method to finalize any behaviors associated with the change in presentation style.
	}
}

extension MessagesViewController: UICollectionViewDataSource {
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return 3
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CellReuseID", for: indexPath)
		cell.contentView.backgroundColor = .red
		return cell
	}
}
